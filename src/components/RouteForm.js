import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Paper,
  TextField,
  Button,
  Typography,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Stack,
  Alert,
  Snackbar,
} from '@mui/material';
import { useAuth } from '../context/AuthContext'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è API_URL
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3005';

const RouteForm = () => {
  const navigate = useNavigate();
  const { user } = useAuth(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [formData, setFormData] = useState({
    walkingTime: '',
    companions: '',
    budget: '',
    cafePreferences: '',
    additionalWishes: '',
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const parseRoutePoints = (routeText) => {
    const points = [];
    const pointsSection = routeText.split('üìç –î–ï–¢–ê–õ–¨–ù–´–ô –ú–ê–†–®–†–£–¢:')[1];
    
    if (pointsSection) {
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–æ—á–µ–∫
      const pointsBlocks = pointsSection.split(/\n\n\d+\./);
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø—É—Å—Ç–æ–π
      for (let i = 1; i < pointsBlocks.length; i++) {
        const block = pointsBlocks[i];
        const lines = block.trim().split('\n');
        
        const point = {
          name: '',
          description: '',
          duration: '',
          activities: [],
          tips: [],
          food: [],
          photos: [],
          transition: ''
        };

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏
        point.name = lines[0].trim();

        let currentSection = '';
        for (let j = 1; j < lines.length; j++) {
          const line = lines[j].trim();
          
          if (line.startsWith('‚è±Ô∏è')) {
            point.duration = line.replace('‚è±Ô∏è –í—Ä–µ–º—è:', '').trim();
          } else if (line.startsWith('üìù')) {
            point.description = line.replace('üìù –û–ø–∏—Å–∞–Ω–∏–µ:', '').trim();
          } else if (line.startsWith('üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:')) {
            currentSection = 'activities';
          } else if (line.startsWith('üí° –°–æ–≤–µ—Ç—ã:')) {
            currentSection = 'tips';
          } else if (line.startsWith('üçΩÔ∏è')) {
            const food = line.replace('üçΩÔ∏è –ì–¥–µ –ø–æ–µ—Å—Ç—å:', '').trim();
            if (food) point.food.push(food);
          } else if (line.startsWith('üì∏')) {
            const photos = line.replace('üì∏ –§–æ—Ç–æ:', '').trim();
            if (photos) point.photos = [photos];
          } else if (line.startsWith('üö∂')) {
            point.transition = line.replace('üö∂ –ü–µ—Ä–µ—Ö–æ–¥:', '').trim();
          } else if (line.startsWith('- ')) {
            // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—É—â—É—é —Å–µ–∫—Ü–∏—é
            const item = line.replace('- ', '').trim();
            if (currentSection === 'activities' && item) {
              point.activities.push(item);
            } else if (currentSection === 'tips' && item) {
              point.tips.push(item);
            }
          }
        }

        if (point.name) {
          points.push(point);
        }
      }
    }
    
    console.log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏:', points);
    return points;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');
    
    try {
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏:', formData);

      const response = await fetch(`${API_URL}/api/generate-route`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          categories: ['food', 'culture', 'entertainment'],
          duration: formData.walkingTime,
          pace: 'moderate',
          transportType: 'walking',
          timeOfDay: 'afternoon',
          accessibility: 'standard',
          preferences: `–ö–æ–º–ø–∞–Ω–∏—è: ${formData.companions}. –ë—é–¥–∂–µ—Ç: ${formData.budget}. –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∫–∞—Ñ–µ: ${formData.cafePreferences}. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: ${formData.additionalWishes}`,
          userId: user ? user.uid : null
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞');
      }

      const data = await response.json();
      console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
      console.log('–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞:', typeof data);
      console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', Object.keys(data));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!data.generatedRoute) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      // –ü–∞—Ä—Å–∏–º —Ç–æ—á–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
      const routePoints = parseRoutePoints(data.generatedRoute);
      console.log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', routePoints);

      // –†–∞–∑–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
      const [overview, details] = data.generatedRoute.split('üìç –î–ï–¢–ê–õ–¨–ù–´–ô –ú–ê–†–®–†–£–¢:');

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const formattedRoute = {
        name: `–ú–∞—Ä—à—Ä—É—Ç –Ω–∞ ${formData.walkingTime} —á–∞—Å(–∞/–æ–≤)`,
        description: overview.trim(),
        duration: formData.walkingTime,
        pace: data.routeMetadata?.pace || 'moderate',
        timeOfDay: data.routeMetadata?.timeOfDay || 'afternoon',
        points: routePoints,
        companions: formData.companions,
        budget: formData.budget,
        preferences: {
          cafePreferences: formData.cafePreferences,
          additionalWishes: formData.additionalWishes
        },
        weatherAdjustments: data.weatherAdjustments || {},
        recommendations: data.recommendations || {},
        routeMetadata: {
          ...data.routeMetadata,
          generatedAt: new Date().toISOString()
        }
      };

      console.log('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:', formattedRoute);
      console.log('–¢–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', formattedRoute.points);
      console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage:', JSON.stringify(formattedRoute, null, 2));
      localStorage.setItem('generatedRoute', JSON.stringify(formattedRoute));
      navigate('/route');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
      setError(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Box sx={{ py: 4 }}>
      <Paper elevation={3} sx={{ p: 4, maxWidth: 600, mx: 'auto' }}>
        <Typography variant="h4" component="h1" gutterBottom>
          –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–∞—Ä—à—Ä—É—Ç–∞
        </Typography>
        
        <form onSubmit={handleSubmit}>
          <Stack spacing={3}>
            <FormControl fullWidth>
              <InputLabel>–í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏</InputLabel>
              <Select
                name="walkingTime"
                value={formData.walkingTime}
                label="–í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏"
                onChange={handleChange}
                required
              >
                <MenuItem value="1">1 —á–∞—Å</MenuItem>
                <MenuItem value="2">2 —á–∞—Å–∞</MenuItem>
                <MenuItem value="3">3 —á–∞—Å–∞</MenuItem>
                <MenuItem value="4">4+ —á–∞—Å–∞</MenuItem>
              </Select>
            </FormControl>

            <TextField
              name="companions"
              label="–° –∫–µ–º –∏–¥–µ—Ç–µ?"
              value={formData.companions}
              onChange={handleChange}
              fullWidth
              required
            />

            <FormControl fullWidth>
              <InputLabel>–ë—é–¥–∂–µ—Ç</InputLabel>
              <Select
                name="budget"
                value={formData.budget}
                label="–ë—é–¥–∂–µ—Ç"
                onChange={handleChange}
                required
              >
                <MenuItem value="low">–≠–∫–æ–Ω–æ–º–Ω—ã–π (–¥–æ 1000‚ÇΩ)</MenuItem>
                <MenuItem value="medium">–°—Ä–µ–¥–Ω–∏–π (1000‚ÇΩ-3000‚ÇΩ)</MenuItem>
                <MenuItem value="high">–í—ã—Å–æ–∫–∏–π (3000‚ÇΩ+)</MenuItem>
              </Select>
            </FormControl>

            <TextField
              name="cafePreferences"
              label="–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∫–∞—Ñ–µ"
              value={formData.cafePreferences}
              onChange={handleChange}
              fullWidth
              multiline
              rows={2}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è, –≤–µ–≥–∞–Ω—Å–∫–∏–µ –±–ª—é–¥–∞, —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞..."
            />

            <TextField
              name="additionalWishes"
              label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
              value={formData.additionalWishes}
              onChange={handleChange}
              fullWidth
              multiline
              rows={4}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Å—Ç–∞, —Ö–æ—á–µ—Ç—Å—è –ø–æ—Å–µ—Ç–∏—Ç—å —Å–º–æ—Ç—Ä–æ–≤—ã–µ –ø–ª–æ—â–∞–¥–∫–∏, –Ω—É–∂–Ω—ã –º–µ—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏..."
            />

            {error && (
              <Alert severity="error" onClose={() => setError('')}>
                {error}
              </Alert>
            )}

            <Button
              type="submit"
              variant="contained"
              size="large"
              disabled={isLoading}
            >
              {isLoading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç'}
            </Button>
          </Stack>
        </form>
      </Paper>

      <Snackbar
        open={!!error}
        autoHideDuration={6000}
        onClose={() => setError('')}
      >
        <Alert severity="error" onClose={() => setError('')}>
          {error}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default RouteForm; 