const express = require('express');
const cors = require('cors');
const OpenAI = require('openai');
const axios = require('axios');
const multer = require('multer');
const path = require('path');
const { authenticateToken, authController } = require('./auth');
require('dotenv').config();

const app = express();
const port = 3005;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/');
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + path.extname(file.originalname));
  }
});

const upload = multer({ storage: storage });

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const fs = require('fs');
if (!fs.existsSync('uploads')) {
  fs.mkdirSync('uploads');
}

// –î–µ–ª–∞–µ–º –ø–∞–ø–∫—É uploads –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏
app.use('/uploads', express.static('uploads'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors({
  origin: 'http://localhost:3000',
  methods: ['GET', 'POST', 'DELETE', 'PUT'],
  credentials: true
}));

app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è Qwen
const openai = new OpenAI({
  apiKey: 'sk-0a75401fb2cc415a829853f530962cf5',
  baseURL: "https://dashscope-intl.aliyuncs.com/compatible-mode/v1"
});

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
const users = new Map();
const routes = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
const reviews = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ API –Ø–Ω–¥–µ–∫—Å.–ì–µ–æ–∫–æ–¥–µ—Ä
async function getCoordinates(placeName) {
  try {
    const response = await axios.get(`https://geocode-maps.yandex.ru/1.x/`, {
      params: {
        apikey: '4527e6e0-3b7e-4ade-9b8f-34ac356e812c',
        format: 'json',
        geocode: `–ú–æ—Å–∫–≤–∞, ${placeName}`,
      }
    });

    const features = response.data.response.GeoObjectCollection.featureMember;
    if (features.length > 0) {
      const coordinates = features[0].GeoObject.Point.pos.split(' ').map(Number).reverse();
      return coordinates;
    }
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return null;
  }
}

app.post('/api/generate-route', async (req, res) => {
  try {
    const { 
      categories, 
      duration, 
      pace,
      transportType,
      timeOfDay, 
      accessibility, 
      preferences 
    } = req.body;

    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–∞:', req.body);

    const completion = await openai.chat.completions.create({
      model: "qwen-max",
      messages: [
        { 
          role: "system", 
          content: `–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ –ú–æ—Å–∫–≤–µ. –°–æ–∑–¥–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã.
          –í–∞–∂–Ω–æ: —É–∫–∞–∑—ã–≤–∞–π –¢–û–ß–ù–´–ï –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ú–æ—Å–∫–≤–µ.
          
          –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞–∫–æ–π:
          
          üéØ –ö–†–ê–¢–ö–ò–ô –û–ë–ó–û–† –ú–ê–†–®–†–£–¢–ê
          [–û—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
          
          üìç –¢–û–ß–ö–ò –ú–ê–†–®–†–£–¢–ê:
          
          1. [–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞] üèõÔ∏è
             ‚è±Ô∏è –í—Ä–µ–º—è: [–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è]
             üìù –û–ø–∏—Å–∞–Ω–∏–µ: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞]
             üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
             - [–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 1]
             - [–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 2]
             - [–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 3]
             üí° –°–æ–≤–µ—Ç—ã:
             - [—Å–æ–≤–µ—Ç 1]
             - [—Å–æ–≤–µ—Ç 2]
             üö∂ –ü–µ—Ä–µ—Ö–æ–¥: [–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–π–º–µ—Ç, —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–∞]
          
          2. [–°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞]...
          
          –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
          –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å–µ –º–µ—Å—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –∏—Ö –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–µ –ú–æ—Å–∫–≤—ã.
          –°—Ç—Ä–æ–π –º–∞—Ä—à—Ä—É—Ç –ª–æ–≥–∏—á–Ω–æ, —É—á–∏—Ç—ã–≤–∞—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏.
          
          –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:
          1. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø "walking" (—Ç–æ–ª—å–∫–æ –ø–µ—à–∫–æ–º):
             - –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 2-3 –∫–º
             - –í—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—ã —Ç–æ–ª—å–∫–æ –ø–µ—à–∫–æ–º
             - –ú–∞—Ä—à—Ä—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –≤ –æ–¥–Ω–æ–º —Ä–∞–π–æ–Ω–µ
          
          2. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø "mixed" (–ø–µ—à–∫–æ–º + —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç):
             - –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç—Ä–æ/–∞–≤—Ç–æ–±—É—Å—ã –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
             - –î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å –∫–∞–∫ –¥–æ–±–∏—Ä–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
             - –£–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–±—É—Å–æ–≤/—Ç—Ä–æ–ª–ª–µ–π–±—É—Å–æ–≤ –∏ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ
          
          3. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø "transport" (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ):
             - –û—Å–Ω–æ–≤–Ω–æ–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
             - –ú–∏–Ω–∏–º—É–º –ø–µ—à–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
             - –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –±–æ–ª–µ–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
             - –î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ`
        },
        { 
          role: "user", 
          content: `–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ –ú–æ—Å–∫–≤–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
            - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories.join(', ')}
            - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} —á–∞—Å–æ–≤
            - –¢–µ–º–ø: ${pace}
            - –°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è: ${transportType}
            - –í—Ä–µ–º—è —Å—É—Ç–æ–∫: ${timeOfDay}
            - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${accessibility}
            - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: ${preferences}
            
–ú–∞—Ä—à—Ä—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º, —Å —É—á–µ—Ç–æ–º:
- –í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è (${transportType})
- –í—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥—ã/–ø—Ä–æ–µ–∑–¥ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
- –í—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–¥—ã—Ö –∏ –ø–∏—Ç–∞–Ω–∏–µ
- –û–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ${duration} —á–∞—Å–æ–≤
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ (${timeOfDay})
- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (${accessibility})`
        }
      ],
      temperature: 0.7,
      max_tokens: 3000
    });

    if (!completion.choices || !completion.choices[0]) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');
    }

    const routeDescription = completion.choices[0]?.message?.content;
    const routeId = Date.now().toString();

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç AI –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    const sections = routeDescription.split('\n\n');
    let overview = '';
    const points = [];
    let currentPoint = null;

    for (const section of sections) {
      if (section.startsWith('üéØ –ö–†–ê–¢–ö–ò–ô –û–ë–ó–û–†')) {
        overview = section.replace('üéØ –ö–†–ê–¢–ö–ò–ô –û–ë–ó–û–† –ú–ê–†–®–†–£–¢–ê', '').trim();
      } else if (section.match(/^\d+\./)) {
        if (currentPoint) {
          // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π
          const coordinates = await getCoordinates(currentPoint.name);
          if (coordinates) {
            currentPoint.coordinates = coordinates;
          }
          points.push(currentPoint);
        }
        
        const lines = section.split('\n');
        const name = lines[0].replace(/^\d+\.\s*/, '').trim();
        
        currentPoint = {
          id: points.length + 1,
          name: name,
          duration: '',
          description: '',
          activities: [],
          tips: [],
          transition: ''
        };

        for (const line of lines.slice(1)) {
          const trimmedLine = line.trim();
          if (trimmedLine.startsWith('‚è±Ô∏è')) {
            currentPoint.duration = trimmedLine.replace('‚è±Ô∏è –í—Ä–µ–º—è:', '').trim();
          } else if (trimmedLine.startsWith('üìù')) {
            currentPoint.description = trimmedLine.replace('üìù –û–ø–∏—Å–∞–Ω–∏–µ:', '').trim();
          } else if (trimmedLine.startsWith('-') && currentPoint.activities.length < 3) {
            currentPoint.activities.push(trimmedLine.replace('-', '').trim());
          } else if (trimmedLine.startsWith('üí°')) {
            currentPoint.tips.push(trimmedLine.replace('üí°', '').trim());
          } else if (trimmedLine.startsWith('üö∂')) {
            currentPoint.transition = trimmedLine.replace('üö∂ –ü–µ—Ä–µ—Ö–æ–¥:', '').trim();
          }
        }
      }
    }

    if (currentPoint) {
      const coordinates = await getCoordinates(currentPoint.name);
      if (coordinates) {
        currentPoint.coordinates = coordinates;
      }
      points.push(currentPoint);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã —Å—Å—ã–ª–∫—É –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
    const mapPoints = points
      .filter(point => point.coordinates)
      .map(point => point.coordinates.join(','))
      .join('~');
    
    const yandexMapsUrl = `https://yandex.ru/maps/?rtext=${mapPoints}&rtt=pd`;
    
    const routeData = {
      routeId: routeId,
      name: `${duration}-—á–∞—Å–æ–≤–æ–π ${categories.join(' –∏ ')} –º–∞—Ä—à—Ä—É—Ç`,
      description: overview,
      duration: duration,
      pace: pace,
      timeOfDay: timeOfDay,
      points: points,
      yandexMapsUrl: yandexMapsUrl,
      createdAt: new Date().toISOString()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    routes.set(routeId, routeData);

    // –ï—Å–ª–∏ –µ—Å—Ç—å userId –≤ –∑–∞–ø—Ä–æ—Å–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (req.body.userId) {
      if (!users.has(req.body.userId)) {
        users.set(req.body.userId, { routes: new Set() });
      }
      users.get(req.body.userId).routes.add(routeId);
    }

    res.json(routeData);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞',
      details: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ ID
app.get('/api/route/:id', (req, res) => {
  const routeId = req.params.id;
  const route = routes.get(routeId);
  
  if (!route) {
    return res.status(404).json({
      success: false,
      error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
    });
  }
  
  res.json(route);
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/save-route', (req, res) => {
  const { userId, routeId } = req.body;
  
  if (!users.has(userId)) {
    users.set(userId, { routes: new Set() });
  }
  
  const userProfile = users.get(userId);
  userProfile.routes.add(routeId);
  
  res.json({ success: true });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user-routes/:userId', (req, res) => {
  const userId = req.params.userId;
  const userProfile = users.get(userId);
  
  if (!userProfile) {
    return res.json({ routes: [] });
  }
  
  const userRoutes = Array.from(userProfile.routes)
    .map(routeId => {
      const route = routes.get(routeId);
      return route ? { ...route, id: routeId } : null;
    })
    .filter(route => route !== null);
  
  res.json({ routes: userRoutes });
});

// –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
app.delete('/api/routes/:routeId', (req, res) => {
  const routeId = req.params.routeId;
  
  // –£–¥–∞–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –∏–∑ –æ–±—â–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  routes.delete(routeId);
  
  // –£–¥–∞–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  for (const [userId, userProfile] of users.entries()) {
    userProfile.routes.delete(routeId);
  }
  
  res.json({ success: true });
});

// –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
app.post('/api/upload-avatar', upload.single('avatar'), (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }
    
    const avatarUrl = `http://localhost:3005/uploads/${req.file.filename}`;
    res.json({ success: true, avatarUrl });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞' });
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.post('/api/auth/register', authController.register);
app.post('/api/auth/login', authController.login);
app.get('/api/auth/me', authenticateToken, authController.getMe);
app.put('/api/auth/update-profile', authenticateToken, authController.updateProfile);

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∫ –º–∞—Ä—à—Ä—É—Ç—É
app.post('/api/reviews', async (req, res) => {
  try {
    const { userId, routeId, likedAspects, dislikedAspects, comment, rating } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–∞—Ä—à—Ä—É—Ç–∞
    if (!users.has(userId)) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    if (!routes.has(routeId)) {
      return res.status(404).json({ message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const reviewId = Date.now().toString();
    const review = {
      id: reviewId,
      userId,
      routeId,
      likedAspects,
      dislikedAspects,
      comment,
      rating,
      createdAt: new Date().toISOString()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
    if (!reviews.has(routeId)) {
      reviews.set(routeId, new Map());
    }
    reviews.get(routeId).set(userId, review);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∑—ã–≤–µ –∫ –º–∞—Ä—à—Ä—É—Ç—É
    const route = routes.get(routeId);
    if (!route.reviews) {
      route.reviews = [];
    }
    route.reviews.push(reviewId);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –º–∞—Ä—à—Ä—É—Ç–∞
    const routeReviews = Array.from(reviews.get(routeId).values());
    route.averageRating = routeReviews.reduce((acc, rev) => acc + rev.rating, 0) / routeReviews.length;

    res.json({ success: true, review });
  } catch (error) {
    console.error('Error saving review:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user-reviews/:userId', (req, res) => {
  try {
    const userId = req.params.userId;
    const userReviews = [];

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const [routeId, routeReviews] of reviews.entries()) {
      const review = routeReviews.get(userId);
      if (review) {
        const route = routes.get(routeId);
        userReviews.push({
          ...review,
          routeName: route.name,
          routeDuration: route.duration,
          routePace: route.pace
        });
      }
    }

    res.json({ reviews: userReviews });
  } catch (error) {
    console.error('Error fetching user reviews:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
app.get('/api/route-reviews/:routeId', (req, res) => {
  try {
    const routeId = req.params.routeId;
    const routeReviews = reviews.get(routeId);

    if (!routeReviews) {
      return res.json({ reviews: [] });
    }

    const reviewsList = Array.from(routeReviews.values()).map(review => {
      const user = users.get(review.userId);
      return {
        ...review,
        username: user.username,
        userAvatar: user.avatar
      };
    });

    res.json({ reviews: reviewsList });
  } catch (error) {
    console.error('Error fetching route reviews:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
  res.status(500).json({
    success: false,
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    details: err.message
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
}).on('error', (err) => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', err);
  process.exit(1);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  server.close(() => {
    console.log('–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç');
    process.exit(0);
  });
}); 