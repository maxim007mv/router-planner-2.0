rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'owner', 'developer']);
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // User collection rules
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow delete: if isAdmin();
    }

    // Routes collection rules
    match /routes/{routeId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      
      // Nested collections within routes
      match /likes/{likeId} {
        allow read: if true;
        allow write: if isAuthenticated();
      }
      
      match /comments/{commentId} {
        allow read: if true;
        allow write: if isAuthenticated();
      }
    }

    // UserRoutes collection rules
    match /userRoutes/{document} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Reviews collection rules
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Favorites collection rules
    match /favorites/{favoriteId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Places collection rules
    match /places/{placeId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // Admin collection rules
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }
  }
} 