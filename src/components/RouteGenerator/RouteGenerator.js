import React, { useState, useEffect, useCallback } from 'react';
import { 
  FaClock, FaWalking, FaTheaterMasks, FaTree, FaLandmark, 
  FaUtensils, FaMagic, FaChevronRight, FaChevronLeft,
  FaCamera, FaShoppingBag, FaHistory, FaMusic, FaPalette,
  FaGlassCheers, FaBookOpen, FaStreetView, FaAccessibleIcon, 
  FaBaby, FaUserClock, FaSun, FaMoon, FaMapMarkerAlt,
  FaDirections, FaSubway, FaInfoCircle, FaUmbrella,
  FaMobileAlt, FaTicketAlt, FaBolt, FaRegCompass,
  FaRoute, FaCoffee, FaRegClock, FaMapMarkedAlt
} from 'react-icons/fa';
import './RouteGenerator.css';

const RouteGenerator = () => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    duration: '',
    categories: [],
    pace: '',
    budget: '',
    preferences: '',
    accessibility: '',
    timeOfDay: '',
    season: ''
  });
  const [generatedRoute, setGeneratedRoute] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [map, setMap] = useState(null);
  const [mapError, setMapError] = useState(null);
  const [isMapScriptLoaded, setIsMapScriptLoaded] = useState(false);
  const [loadingStep, setLoadingStep] = useState(0);

  const categories = [
    { id: 'culture', icon: <FaTheaterMasks />, label: '–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ' },
    { id: 'nature', icon: <FaTree />, label: '–ü—Ä–∏—Ä–æ–¥–∞ –∏ –ø–∞—Ä–∫–∏' },
    { id: 'architecture', icon: <FaLandmark />, label: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞' },
    { id: 'food', icon: <FaUtensils />, label: '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ' },
    { id: 'history', icon: <FaHistory />, label: '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Å—Ç–∞' },
    { id: 'photo', icon: <FaCamera />, label: '–§–æ—Ç–æ–≥–µ–Ω–∏—á–Ω—ã–µ –º–µ—Å—Ç–∞' },
    { id: 'shopping', icon: <FaShoppingBag />, label: '–®–æ–ø–ø–∏–Ω–≥' },
    { id: 'entertainment', icon: <FaGlassCheers />, label: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' },
    { id: 'art', icon: <FaPalette />, label: '–ì–∞–ª–µ—Ä–µ–∏ –∏ –≤—ã—Å—Ç–∞–≤–∫–∏' },
    { id: 'music', icon: <FaMusic />, label: '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞' },
    { id: 'literary', icon: <FaBookOpen />, label: '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –º–µ—Å—Ç–∞' },
    { id: 'hidden', icon: <FaStreetView />, label: '–°–∫—Ä—ã—Ç—ã–µ –∂–µ–º—á—É–∂–∏–Ω—ã' }
  ];

  const durations = [
    { value: '2', label: '2 —á–∞—Å–∞' },
    { value: '3', label: '3 —á–∞—Å–∞' },
    { value: '4', label: '4 —á–∞—Å–∞' },
    { value: '6', label: '6 —á–∞—Å–æ–≤' },
    { value: '8', label: '–í–µ—Å—å –¥–µ–Ω—å' }
  ];

  const paces = [
    { value: 'relaxed', label: '–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π', description: '–ú–Ω–æ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫, –Ω–µ—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏' },
    { value: 'moderate', label: '–£–º–µ—Ä–µ–Ω–Ω—ã–π', description: '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —Ç–µ–º–ø —Å –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏' },
    { value: 'active', label: '–ê–∫—Ç–∏–≤–Ω—ã–π', description: '–ë—ã—Å—Ç—Ä—ã–π —Ç–µ–º–ø, –º–∏–Ω–∏–º—É–º –æ—Å—Ç–∞–Ω–æ–≤–æ–∫' }
  ];

  const budgets = [
    { value: 'budget', label: '–ë—é–¥–∂–µ—Ç–Ω—ã–π', description: '–î–æ 1000‚ÇΩ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞' },
    { value: 'moderate', label: '–°—Ä–µ–¥–Ω–∏–π', description: '1000-3000‚ÇΩ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞' },
    { value: 'luxury', label: '–ü—Ä–µ–º–∏—É–º', description: '–û—Ç 3000‚ÇΩ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞' }
  ];

  const timeOfDay = [
    { value: 'morning', label: '–£—Ç—Ä–æ', description: '6:00 - 12:00' },
    { value: 'afternoon', label: '–î–µ–Ω—å', description: '12:00 - 18:00' },
    { value: 'evening', label: '–í–µ—á–µ—Ä', description: '18:00 - 23:00' }
  ];

  const seasons = [
    { value: 'summer', label: '–õ–µ—Ç–æ' },
    { value: 'autumn', label: '–û—Å–µ–Ω—å' },
    { value: 'winter', label: '–ó–∏–º–∞' },
    { value: 'spring', label: '–í–µ—Å–Ω–∞' }
  ];

  const accessibility = [
    { value: 'standard', label: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π' },
    { value: 'wheelchair', label: '–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∫–æ–ª—è—Å–æ–∫' },
    { value: 'elderly', label: '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö' },
    { value: 'children', label: '–° –¥–µ—Ç—å–º–∏' }
  ];

  const initMap = useCallback(() => {
    if (!window.ymaps || !generatedRoute) return;

    try {
      const mapElement = document.getElementById('map');
      if (!mapElement || !mapElement.offsetWidth) {
        setTimeout(initMap, 100);
        return;
      }

      if (map) {
        map.destroy();
      }

      const newMap = new window.ymaps.Map('map', {
        center: [55.753215, 37.622504],
        zoom: 12
      });
      setMap(newMap);
    } catch (error) {
      console.error('Error initializing map:', error);
      setMapError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã');
    }
  }, [generatedRoute, map]);

  useEffect(() => {
    if (generatedRoute && step === 6 && !isMapScriptLoaded) {
      const loadYandexMaps = () => {
        if (window.ymaps) {
          setIsMapScriptLoaded(true);
          window.ymaps.ready(initMap);
          return;
        }

        const script = document.createElement('script');
        script.src = `https://api-maps.yandex.ru/2.1/?apikey=4527e6e0-3b7e-4ade-9b8f-34ac356e812c&lang=ru_RU`;
        script.async = true;
        script.onerror = () => {
          setMapError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã');
        };
        script.onload = () => {
          setIsMapScriptLoaded(true);
          window.ymaps.ready(initMap);
        };
        document.body.appendChild(script);
      };

      loadYandexMaps();
    }

    return () => {
      if (map) {
        map.destroy();
        setMap(null);
      }
    };
  }, [initMap, map, generatedRoute, step, isMapScriptLoaded]);

  const handleCategoryToggle = (categoryId) => {
    setFormData(prev => ({
      ...prev,
      categories: prev.categories.includes(categoryId)
        ? prev.categories.filter(id => id !== categoryId)
        : [...prev.categories, categoryId]
    }));
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const isStepValid = () => {
    switch (step) {
      case 1:
        return formData.duration !== '';
      case 2:
        return formData.categories.length > 0;
      case 3:
        return formData.pace !== '';
      case 4:
        return formData.accessibility !== '';
      case 5:
        return formData.timeOfDay !== '' && formData.season !== '';
      case 6:
        return formData.categories.includes('food') ? formData.budget !== '' : true;
      case 7:
        return formData.preferences.length >= 10;
      default:
        return false;
    }
  };

  const handleNext = () => {
    if (isStepValid()) {
      setStep(prev => prev + 1);
    }
  };

  const handleBack = () => {
    setStep(prev => prev - 1);
  };

  const handleSubmit = async () => {
    setIsLoading(true);
    setMapError(null);
    setError(null);
    setLoadingStep(0);

    const loadingSteps = [
      "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è...",
      "–ü–æ–¥–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞...",
      "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç...",
      "–°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö...",
      "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö...",
      "–§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ...",
      "–ó–∞–≤–µ—Ä—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–∞..."
    ];

    const loadingInterval = setInterval(() => {
      setLoadingStep(prev => (prev + 1) % loadingSteps.length);
    }, 3000);

    try {
      console.log('–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–∞...', formData);
      const routePrompt = `–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–µ—à–µ—Ö–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ –ú–æ—Å–∫–≤–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:

### –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
${Object.entries({
  '‚åö –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': `${formData.duration} —á–∞—Å–∞`,
  'üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã': formData.categories.map(cat => categories.find(c => c.id === cat)?.label).join(', '),
  'üö∂ –¢–µ–º–ø': paces.find(p => p.value === formData.pace)?.label,
  'üåÜ –í—Ä–µ–º—è —Å—É—Ç–æ–∫': timeOfDay.find(t => t.value === formData.timeOfDay)?.label,
  'üçÇ –°–µ–∑–æ–Ω': seasons.find(s => s.value === formData.season)?.label,
  '‚ôø –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å': accessibility.find(a => a.value === formData.accessibility)?.label,
  'üí∞ –ë—é–¥–∂–µ—Ç': formData.budget ? budgets.find(b => b.value === formData.budget)?.label : '–ù–µ —É–∫–∞–∑–∞–Ω',
  'üí≠ –ü–æ–∂–µ–ª–∞–Ω–∏—è': formData.preferences || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π'
}).map(([k, v]) => `- ${k}: ${v}`).join('\n')}

### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–∞—Ä—à—Ä—É—Ç—É:
1. –†–∞–∑–±–µ–π –º–∞—Ä—à—Ä—É—Ç –Ω–∞ 5-8 —ç—Ç–∞–ø–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ —É–∫–∞–∂–∏:
   - –¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏ –µ–≥–æ —Ç–∏–ø (–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∫–∞—Ñ–µ, –º—É–∑–µ–π –∏ —Ç.–¥.)
   - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
   - –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å–ø—Ä–∞–≤–∫—É –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã
   - –õ—É—á—à–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è
   - –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ–∑–æ–Ω–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
3. –ú–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏ –¥–æ–±–∞–≤—å:
   - –ü–µ—à–µ—Ö–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞–º–∏
   - –í—Ä–µ–º—è –≤ –ø—É—Ç–∏ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
   - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
4. –í–∫–ª—é—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:
   - –õ–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞
   - –¢—É–∞–ª–µ—Ç—ã –∏ –∑–æ–Ω—ã Wi-Fi
   - –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ –∏ –æ–±—É–≤–∏

### –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–¥–µ JSON:
{
  "stages": [
    {
      "name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
      "type": "–¢–∏–ø –º–µ—Å—Ç–∞",
      "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ...",
      "address": "–¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å",
      "coordinates": [55.12345, 37.12345],
      "time": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è",
      "facts": ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç 1", "–§–∞–∫—Ç 2"],
      "photos": ["–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ—Å–ø–æ—Ç–∞ 1", "–°–æ–≤–µ—Ç –ø–æ —Å—ä–µ–º–∫–µ 2"],
      "routeFromPrevious": {
        "walking": "–ü–µ—à–∏–π –º–∞—Ä—à—Ä—É—Ç...",
        "transport": "–í–∞—Ä–∏–∞–Ω—Ç –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ...",
        "time": "15 –º–∏–Ω—É—Ç",
        "distance": "1.2 –∫–º"
      },
      "tips": {
        "weather": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≥–æ–¥–µ...",
        "crowds": "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –º–µ—Å—Ç–∞...",
        "money": "–°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã..."
      }
    }
  ],
  "metadata": {
    "totalTime": "5 —á–∞—Å–æ–≤",
    "totalDistance": "7.8 –∫–º",
    "budgetEstimate": "2500-3000 —Ä—É–±.",
    "bestFor": ["–§–æ—Ç–æ–≥—Ä–∞—Ñ—ã", "–ò—Å—Ç–æ—Ä–∏–∫–∏", "–°–µ–º—å–∏"],
    "safetyTips": ["–ò–∑–±–µ–≥–∞—Ç—å —Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–µ—É–ª–∫–æ–≤...", "–ù–µ –Ω–æ—Å–∏—Ç—å –º–Ω–æ–≥–æ –Ω–∞–ª–∏—á–Ω—ã—Ö"]
  }
}

–í–∞–∂–Ω–æ:
- –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ Markdown
- –†–µ–∞–ª—å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–¥—Ä–µ—Å–∞
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 5 –∑–Ω–∞–∫–æ–≤
- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤
- –£—á–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π (–∑–∏–º–æ–π - –∫–∞—Ç–∫–∏, –ª–µ—Ç–æ–º - —Ñ–æ–Ω—Ç–∞–Ω—ã)
- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥—ã
- –õ–æ–≥–∏—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ç–∞–ø–æ–≤`;

      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');

      const response = await fetch('http://localhost:3001/generate-route', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ prompt: routePrompt })
      });

      console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, —Å—Ç–∞—Ç—É—Å:', response.status);
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ
        if (errorData.points && Array.isArray(errorData.points) && errorData.points.length > 0) {
          console.log('–ü–æ–ª—É—á–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞:', errorData.points);
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const formattedRoute = {
            points: errorData.points.map(point => ({
              name: point.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
              type: point.type || '–ú–µ—Å—Ç–æ',
              description: point.description || '',
              duration: point.duration || '30 –º–∏–Ω—É—Ç',
              coordinates: point.coordinates || [55.753215, 37.622504],
              route: '',
              transport: '',
              sights: '',
              tips: '',
              photos: '',
              weatherAlternative: '',
              apps: [
                { name: "–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã", description: "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏" },
                { name: "–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–æ", description: "–î–ª—è –ø–æ–µ–∑–¥–æ–∫ –Ω–∞ –º–µ—Ç—Ä–æ" }
              ]
            })),
            summary: {
              totalTime: '–ü—Ä–∏–º–µ—Ä–Ω–æ ' + errorData.points.reduce((acc, point) => 
                acc + parseInt(point.duration) || 0, 0) + ' –º–∏–Ω—É—Ç',
              distance: '–†–∞—Å—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
              budget: '–†–∞—Å—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }
          };
          
          setGeneratedRoute(formattedRoute);
          setStep(8);
          setError({
            title: '–ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω —á–∞—Å—Ç–∏—á–Ω–æ',
            message: '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –±–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
            details: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ' + (errorData.rawResponse || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'),
            suggestion: '–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∑–∂–µ.'
          });
          return;
        }
        
        throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ${response.status}: ${JSON.stringify(errorData)}`);
      }

      const data = await response.json();
      console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);

      if (!data) {
        throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      if (!data.stages || !Array.isArray(data.stages) || data.stages.length === 0) {
        console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ points –≤ –æ—Ç–≤–µ—Ç–µ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        if (data.points && Array.isArray(data.points) && data.points.length > 0) {
          const formattedRoute = {
            points: data.points.map(point => ({
              name: point.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
              type: point.type || '–ú–µ—Å—Ç–æ',
              description: point.description || '',
              duration: point.duration || '30 –º–∏–Ω—É—Ç',
              coordinates: point.coordinates || [55.753215, 37.622504],
              route: '',
              transport: '',
              sights: '',
              tips: '',
              photos: '',
              weatherAlternative: '',
              apps: [
                { name: "–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã", description: "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏" },
                { name: "–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–æ", description: "–î–ª—è –ø–æ–µ–∑–¥–æ–∫ –Ω–∞ –º–µ—Ç—Ä–æ" }
              ]
            })),
            summary: {
              totalTime: '–ü—Ä–∏–º–µ—Ä–Ω–æ ' + data.points.reduce((acc, point) => 
                acc + parseInt(point.duration) || 0, 0) + ' –º–∏–Ω—É—Ç',
              distance: '–†–∞—Å—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
              budget: '–†–∞—Å—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }
          };
          
          setGeneratedRoute(formattedRoute);
          setStep(8);
          setError({
            title: '–ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω —á–∞—Å—Ç–∏—á–Ω–æ',
            message: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –±–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
            details: '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.',
            suggestion: '–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∑–∂–µ.'
          });
          return;
        }
        
        throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const formattedRoute = {
        points: data.stages.map(stage => {
          if (!stage.name || !stage.coordinates) {
            console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç—Ç–∞–ø–∞:', stage);
            throw new Error('–û–¥–∏–Ω –∏–∑ —ç—Ç–∞–ø–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
          }
          
          return {
            name: stage.name,
            type: stage.type || '–ú–µ—Å—Ç–æ',
            description: stage.description || '',
            duration: stage.time || '30 –º–∏–Ω—É—Ç',
            coordinates: stage.coordinates,
            route: stage.routeFromPrevious?.walking || '',
            transport: stage.routeFromPrevious?.transport || '',
            sights: Array.isArray(stage.facts) ? stage.facts.join('\n') : '',
            tips: [
              stage.tips?.weather,
              stage.tips?.crowds,
              stage.tips?.money
            ].filter(Boolean).join('\n'),
            photos: Array.isArray(stage.photos) ? stage.photos.join('\n') : '',
            weatherAlternative: stage.tips?.weather || '',
            apps: [
              { name: "–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã", description: "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏" },
              { name: "–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–æ", description: "–î–ª—è –ø–æ–µ–∑–¥–æ–∫ –Ω–∞ –º–µ—Ç—Ä–æ" }
            ]
          };
        }),
        summary: {
          totalTime: data.metadata?.totalTime || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          distance: data.metadata?.totalDistance || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          budget: data.metadata?.budgetEstimate || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        },
        rawResponse: data
      };

      console.log('–ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', formattedRoute);
      setGeneratedRoute(formattedRoute);
      setStep(8);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
      setError({
        title: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞',
        message: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞.',
        details: error.message,
        suggestion: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
      });
    } finally {
      clearInterval(loadingInterval);
      setIsLoading(false);
    }
  };

  const handleShowOnMap = () => {
    if (!map || !generatedRoute) return;

    map.geoObjects.removeAll();

    const multiRoute = new window.ymaps.multiRouter.MultiRoute({
      referencePoints: generatedRoute.points.map(point => point.coordinates),
      params: {
        routingMode: 'pedestrian'
      }
    }, {
      boundsAutoApply: true,
      wayPointStartIconColor: "#1E88E5",
      wayPointFinishIconColor: "#E53935",
      routeActiveStrokeColor: "#1E88E5",
      routeActiveStrokeWidth: 4
    });

    map.geoObjects.add(multiRoute);
  };

  const renderStep = () => {
    switch (step) {
      case 1:
        return (
          <div className="step-content duration-step">
            <h2>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞</h2>
            <div className="duration-options">
              {durations.map(duration => (
                <button
                  key={duration.value}
                  className={`duration-btn ${formData.duration === duration.value ? 'active' : ''}`}
                  onClick={() => handleInputChange('duration', duration.value)}
                >
                  <FaClock />
                  <span>{duration.label}</span>
                </button>
              ))}
            </div>
          </div>
        );

      case 2:
        return (
          <div className="step-content categories-step">
            <h2>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?</h2>
            <p className="step-description">–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é</p>
            <div className="categories-grid">
              {categories.map(category => (
                <button
                  key={category.id}
                  className={`category-btn ${formData.categories.includes(category.id) ? 'active' : ''}`}
                  onClick={() => handleCategoryToggle(category.id)}
                >
                  {category.icon}
                  <span>{category.label}</span>
                </button>
              ))}
            </div>
          </div>
        );

      case 3:
        return (
          <div className="step-content pace-step">
            <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–ø –ø—Ä–æ–≥—É–ª–∫–∏</h2>
            <div className="option-cards">
              {paces.map(pace => (
                <div
                  key={pace.value}
                  className={`option-card ${formData.pace === pace.value ? 'active' : ''}`}
                  onClick={() => handleInputChange('pace', pace.value)}
                >
                  <h3>
                    {pace.value === 'relaxed' && <FaWalking />}
                    {pace.value === 'moderate' && <FaRegCompass />}
                    {pace.value === 'active' && <FaRoute />}
                    {pace.label}
                  </h3>
                  <p>{pace.description}</p>
                </div>
              ))}
            </div>
          </div>
        );

      case 4:
        return (
          <div className="step-content accessibility-step">
            <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏</h2>
            <div className="option-cards">
              {accessibility.map(option => (
                <div
                  key={option.value}
                  className={`option-card ${formData.accessibility === option.value ? 'active' : ''}`}
                  onClick={() => handleInputChange('accessibility', option.value)}
                >
                  <h3>
                    {option.value === 'wheelchair' && <FaAccessibleIcon />}
                    {option.value === 'children' && <FaBaby />}
                    {option.value === 'elderly' && <FaUserClock />}
                    {option.value === 'standard' && <FaWalking />}
                    {option.label}
                  </h3>
                  <p>{option.description || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π'}</p>
                </div>
              ))}
            </div>
          </div>
        );

      case 5:
        return (
          <div className="step-content time-season-step">
            <h2>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏ —Å–µ–∑–æ–Ω</h2>
            <div className="option-cards">
              <h3>–í—Ä–µ–º—è —Å—É—Ç–æ–∫</h3>
              {timeOfDay.map(time => (
                <div
                  key={time.value}
                  className={`option-card ${formData.timeOfDay === time.value ? 'active' : ''}`}
                  onClick={() => handleInputChange('timeOfDay', time.value)}
                >
                  <h3>
                    {time.value === 'morning' && <FaSun />}
                    {time.value === 'afternoon' && <FaClock />}
                    {time.value === 'evening' && <FaMoon />}
                    {time.label}
                  </h3>
                  <p>{time.description}</p>
                </div>
              ))}
            </div>
            <div className="option-cards" style={{ marginTop: '2rem' }}>
              <h3>–°–µ–∑–æ–Ω</h3>
              {seasons.map(season => (
                <div
                  key={season.value}
                  className={`option-card ${formData.season === season.value ? 'active' : ''}`}
                  onClick={() => handleInputChange('season', season.value)}
                >
                  <h3>{season.label}</h3>
                </div>
              ))}
            </div>
          </div>
        );

      case 6:
        return formData.categories.includes('food') ? (
          <div className="step-content budget-step">
            <h2>–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç</h2>
            <div className="option-cards">
              {budgets.map(budget => (
                <div
                  key={budget.value}
                  className={`option-card ${formData.budget === budget.value ? 'active' : ''}`}
                  onClick={() => handleInputChange('budget', budget.value)}
                >
                  <h3>
                    <FaCoffee />
                    {budget.label}
                  </h3>
                  <p>{budget.description}</p>
                </div>
              ))}
            </div>
          </div>
        ) : handleNext();

      case 7:
        return (
          <div className="step-content preferences-step">
            <h2>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è</h2>
            <p className="step-description">–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)</p>
            <textarea
              className="preferences-input"
              value={formData.preferences}
              onChange={(e) => handleInputChange('preferences', e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, —Ö–æ—Ç–µ–ª –±—ã —É–≤–∏–¥–µ—Ç—å –Ω–µ–æ–±—ã—á–Ω—ã–µ –¥–≤–æ—Ä–∏–∫–∏ –∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –∑–¥–∞–Ω–∏—è—Ö..."
              rows={6}
            />
          </div>
        );

      case 8:
        return (
          <div className="step-content result-step">
            {isLoading ? (
              <div className="loading-overlay">
                <div className="loading-spinner" />
                <div className="loading-message">
                  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
                </div>
                <div className="loading-steps">
                  {[
                    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è...",
                    "–ü–æ–¥–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞...",
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç...",
                    "–°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö...",
                    "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö...",
                    "–§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ...",
                    "–ó–∞–≤–µ—Ä—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–∞..."
                  ].map((step, index) => (
                    <div
                      key={index}
                      className={`loading-step ${index === loadingStep ? 'active' : ''}`}
                    >
                      {step}
                    </div>
                  ))}
                </div>
              </div>
            ) : error ? (
              <div className="error-message">
                <h3>{error.title}</h3>
                <p>{error.message}</p>
                <p>{error.suggestion}</p>
                <div className="error-details">
                  {error.details}
                </div>
              </div>
            ) : generatedRoute && (
              <div className="generated-route">
                <h2>–í–∞—à –º–∞—Ä—à—Ä—É—Ç –≥–æ—Ç–æ–≤!</h2>
                {generatedRoute.points.map((point, index) => (
                  <div key={index} className="route-stage">
                    <div className="stage-header">
                      <div className="stage-number">{index + 1}</div>
                      <div className="stage-title">
                        <h3>{point.name}</h3>
                        <div className="stage-time">
                          <FaRegClock />
                          <span>{point.duration}</span>
                        </div>
                      </div>
                    </div>
                    <div className="stage-content">
                      {point.description && (
                        <div className="info-section">
                          <h4><FaMapMarkerAlt /> –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞</h4>
                          <p>{point.description}</p>
                        </div>
                      )}
                      {point.route && (
                        <div className="info-section">
                          <h4><FaDirections /> –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è</h4>
                          <div className="info-list">
                            {point.route.split('\n').map((item, i) => (
                              <div key={i} className="info-item">
                                <FaMapMarkedAlt className="info-item-icon" />
                                <div className="info-item-content">{item}</div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                      {point.transport && (
                        <div className="info-section">
                          <h4><FaSubway /> –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</h4>
                          <div className="info-list">
                            {point.transport.split('\n').map((item, i) => (
                              <div key={i} className="info-item">
                                <div className="info-item-content">{item}</div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                      {point.sights && (
                        <div className="info-section">
                          <h4><FaLandmark /> –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h4>
                          <div className="info-list">
                            {point.sights.split('\n').map((item, i) => (
                              <div key={i} className="info-item">
                                <FaInfoCircle className="info-item-icon" />
                                <div className="info-item-content">{item}</div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                      {point.foodSpots && (
                        <div className="info-section">
                          <h4><FaUtensils /> –ì–¥–µ –ø–æ–µ—Å—Ç—å</h4>
                          <div className="info-list">
                            {point.foodSpots.split('\n').map((item, i) => (
                              <div key={i} className="info-item">
                                <div className="info-item-content">{item}</div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                      {point.tips && (
                        <div className="info-section">
                          <h4><FaBolt /> –°–æ–≤–µ—Ç—ã</h4>
                          <div className="info-list">
                            {point.tips.split('\n').map((item, i) => (
                              <div key={i} className="info-item">
                                <div className="info-item-content">{item}</div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                      {point.weatherAlternative && (
                        <div className="weather-alternative">
                          <h4><FaUmbrella /> –ü–ª–∞–Ω –ë (–ø—Ä–∏ –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥–µ)</h4>
                          <div className="alternative-list">
                            {point.weatherAlternative.split('\n').map((item, i) => (
                              <div key={i} className="alternative-item">
                                <div className="info-item-content">{item}</div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                      {point.apps && (
                        <div className="useful-apps">
                          {point.apps.map((app, i) => (
                            <div key={i} className="app-item">
                              <FaMobileAlt className="app-icon" />
                              <div className="app-name">{app.name}</div>
                              <div className="app-description">{app.description}</div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                ))}
                {generatedRoute.summary && (
                  <div className="route-summary">
                    <div className="summary-header">–ò—Ç–æ–≥–∏ –º–∞—Ä—à—Ä—É—Ç–∞</div>
                    <div className="summary-grid">
                      <div className="summary-item">
                        <div className="summary-item-label">–û–±—â–µ–µ –≤—Ä–µ–º—è</div>
                        <div className="summary-item-value">{generatedRoute.summary.totalTime}</div>
                      </div>
                      <div className="summary-item">
                        <div className="summary-item-label">–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ</div>
                        <div className="summary-item-value">{generatedRoute.summary.distance}</div>
                      </div>
                      <div className="summary-item">
                        <div className="summary-item-label">–ë—é–¥–∂–µ—Ç</div>
                        <div className="summary-item-value">{generatedRoute.summary.budget}</div>
                      </div>
                    </div>
                  </div>
                )}
                <a
                  href={`https://yandex.ru/maps/?rtext=${generatedRoute.points
                    .map(point => point.coordinates.join(','))
                    .join('~')}&rtt=pd`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="yandex-maps-link"
                >
                  <FaMapMarkedAlt /> –û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö
                </a>
              </div>
            )}
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="route-generator">
      <div className="progress-bar">
        {[1, 2, 3, 4, 5, 6, 7, 8].map(stepNumber => (
          <div
            key={stepNumber}
            className={`progress-step ${step >= stepNumber ? 'active' : ''} ${step === stepNumber ? 'current' : ''}`}
          >
            {stepNumber}
          </div>
        ))}
      </div>

      {renderStep()}

      <div className="form-navigation">
        {step > 1 && step < 8 && (
          <button className="nav-btn back" onClick={handleBack}>
            <FaChevronLeft /> –ù–∞–∑–∞–¥
          </button>
        )}
        {step < 7 ? (
          <button
            className="nav-btn next"
            onClick={handleNext}
            disabled={!isStepValid()}
          >
            –î–∞–ª–µ–µ <FaChevronRight />
          </button>
        ) : step === 7 ? (
          <button
            className="nav-btn generate"
            onClick={handleSubmit}
            disabled={!isStepValid()}
          >
            –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç <FaMagic />
          </button>
        ) : null}
      </div>
    </div>
  );
};

export default RouteGenerator; 